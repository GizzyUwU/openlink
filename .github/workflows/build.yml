name: "publish"

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths-ignore:
      - ".gitea/**"

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-22.04"
            args: ""
          - platform: "ubuntu-22.04-arm"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    env:
      PKG_CONFIG_PATH: ${{ matrix.platform == 'windows-latest' && 'C:\\msys64\\usr\\lib\\pkgconfig;C:\\msys64\\usr\\share\\pkgconfig' || '' }}
      PATH: ${{ matrix.platform == 'windows-latest' && 'C:\\tools\\msys64\\usr\\bin;C:\\tools\\msys64\\mingw64\\bin;' || '' }}${{ env.PATH }}
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: startsWith(matrix.platform, 'ubuntu-22.04')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends libwebkit2gtk-4.1 libayatana-appindicator3-1 librsvg2-dev patchelf libgtk-3-dev pkg-config libglib2.0-dev libpango1.0-dev \
          libcairo2-dev libgdk-pixbuf2.0-dev libatk1.0-dev libharfbuzz-dev pkg-config xdg-utils

      - name: Cache MSYS2
        if: startsWith(matrix.platform, 'windows')
        uses: actions/cache@v3
        with:
          path: C:\msys64
          key: windows-msys2-1
          restore-keys: windows-msys2-

      - name: Install build tools on Windows
        if: startsWith(matrix.platform, 'windows')
        run: |
          choco install -y msys2
          ridk exec pacman -Syu --noconfirm
          ridk exec pacman -S --noconfirm mingw-w64-x86_64-toolchain mingw-w64-x86_64-glib2 mingw-w64-x86_64-pango mingw-w64-x86_64-cairo
          echo "PKG_CONFIG_PATH is now $env:PKG_CONFIG_PATH"

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: "./src-tauri -> target"

      - name: install frontend dependencies
        run: yarn install

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
